syntax = "proto3";

package template;

import "google/protobuf/timestamp.proto";
import "grpc-proto/annotations.proto";

option go_package = "pb/template";

enum Role{
    USER = 0;
    ADMIN = 1;
}

message User{
    int32 id = 1;
    string username = 2;
    Role role = 5;
    string avatar = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp updated_at = 8;
}

message LoginRequest{
    string username = 1;
    string password = 2;
    optional string totpCode = 3;
}

// message LoginResponse{
//     string access_token = 1;
//     string refresh_token = 2;
//     string csrf_token = 3;
//     User user = 4;
// }

message RefreshTokenRequest{
    string refresh_token = 1;
}

// message RefreshTokenResponse{
//     string access_token = 1;
//     string refresh_token = 2;
//     string csrf_token = 3;
//     User user = 4;
// }

message LogoutRequest{
    string refresh_token = 1;
}

message LogoutResponse{
    bool success = 1;
}

message RegisterRequest{
    string username = 1;
    string password = 2;
}




message DefaultAuthResponse{
    string access_token = 1;
    string refresh_token = 2;
    string csrf_token = 3;
    User user = 4;
}

// TOTP

message DisableTOTPRequest{
    string password = 1;
    string totpCode = 2;
}

message DisableTOTPResponse{
    bool success = 1;
}

message EnableTOTPRequest{
    string password = 1;
}

message EnableTOTPResponse{
    string secret = 1;
    string url = 2; // QR code url
}

message VerifyTOTPRequest{
    string totpCode = 1;
}

message VerifyTOTPResponse{
    bool success = 1;
}

message StatusRequest{
    string access_token = 1;
}

message StatusResponse{
    User user = 1;
    bool totpEnabled = 2;   
}

service AuthService{
    rpc Login(LoginRequest) returns (DefaultAuthResponse){
        option (google.api.http) = {
            post: "/api/v1/auth/login"
            body: "username, password"
        };
    }
    rpc RefreshToken(RefreshTokenRequest) returns (DefaultAuthResponse){
        option (google.api.http) = {
            post: "/api/v1/auth/refresh"
            body: "*"
        };
    }
    rpc Logout(LogoutRequest) returns (LogoutResponse){
        option (google.api.http) = {
            post: "/api/v1/auth/logout"
            body: "*"
        };
    }
    rpc Register(RegisterRequest) returns (DefaultAuthResponse){
        option (google.api.http) = {
            post: "/api/v1/auth/register"
            body: "*"
        };
    }
    rpc Status(StatusRequest) returns (StatusResponse){
        option (google.api.http) = {
            get: "/api/v1/auth/status"
        };
    }
    rpc DisableTOTP(DisableTOTPRequest) returns (DisableTOTPResponse){
        option (google.api.http) = {
            post: "/api/v1/auth/totp/disable"
            body: "*"
        };
    }
    rpc EnableTOTP(EnableTOTPRequest) returns (EnableTOTPResponse){
        option (google.api.http) = {
            post: "/api/v1/auth/totp/enable"
            body: "*"
        };
    }
    rpc VerifyTOTP(VerifyTOTPRequest) returns (VerifyTOTPResponse){
        option (google.api.http) = {
            post: "/api/v1/auth/totp/verify"
            body: "*"
        };
    }
}
